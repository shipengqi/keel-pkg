apiVersion: v1
kind: ServiceAccount
metadata:
  name: itom-metrics
  namespace: kube-system

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: microfocus:keel:itom-metrics
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
- apiGroups:
  - ""
  resources:
  - pods
  - nodes
  - namespaces
  - configmaps
  - serviceaccounts
  - secrets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - proxy
- apiGroups:
  - ""
  resources:
  - nodes/log
  - nodes/metrics
  - nodes/proxy
  - nodes/spec
  - nodes/stats
  verbs:
  - '*'
- apiGroups:
  - "apps"
  resources:
  - deployments
  verbs:
  - get
  - list
  - update
  - watch
- nonResourceURLs:
  - /metrics
  verbs:
  - get

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: microfocus:keel:itom-metrics
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: microfocus:keel:itom-metrics
subjects:
- kind: ServiceAccount
  name: itom-metrics
  namespace: kube-system

---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1beta1.metrics.k8s.io
spec:
  service:
    name: metrics-server
    namespace: kube-system
  group: metrics.k8s.io
  version: v1beta1
  insecureSkipTLSVerify: true
  groupPriorityMinimum: 100
  versionPriority: 100

---
apiVersion: v1
kind: Service
metadata:
  name: metrics-server
  namespace: kube-system
  labels:
    kubernetes.io/name: "Metrics-server"
spec:
  selector:
    k8s-app: metrics-server
  ports:
    - port: 443
      protocol: TCP
      targetPort: 8443

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: metrics-server
  namespace: kube-system
  labels:
    k8s-app: metrics-server
  annotations:
    deployment.microfocus.com/simple-update: ignore
spec:
  selector:
    matchLabels:
      k8s-app: metrics-server
  template:
    metadata:
      name: metrics-server
      labels:
        k8s-app: metrics-server
    spec:
      serviceAccountName: itom-metrics
      priorityClassName: system-cluster-critical
      imagePullSecrets:
        - name: registrypullsecret
      nodeSelector:
        {CLUSTER_NODESELECT}
      tolerations:
      - key: "node-role.kubernetes.io/control-plane"
        operator: "Exists"
        effect: "NoSchedule"
      containers:
        - name: metrics-server
          image: {DOCKER_REPOSITORY}/{REGISTRY_ORGNAME}/{IMAGE_METRICS_SERVER}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8443
              scheme: HTTPS
            initialDelaySeconds: 60
            timeoutSeconds: 15
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8443
              scheme: HTTPS
            periodSeconds: 5
            timeoutSeconds: 15
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
            limits:
              cpu: 1
              memory: 300Mi
          command:
            - /metrics-server
            - --v=1
            - --secure-port=8443
            - --kubelet-certificate-authority=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            - --requestheader-client-ca-file=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            - --tls-cert-file=/var/run/secrets/server-cert/metrics-server.crt
            - --tls-private-key-file=/var/run/secrets/server-cert/metrics-server.key
            - --tls-min-version=VersionTLS12
            - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA
          volumeMounts:
            - name: server-cert
              mountPath: /var/run/secrets/server-cert
              readOnly: true
      securityContext:
        runAsUser: {SYSTEM_USER_ID}
        runAsGroup: {SYSTEM_GROUP_ID}
        fsGroup: {SYSTEM_GROUP_ID}
        supplementalGroups: [{SYSTEM_GROUP_ID}]
      volumes:
        - name: server-cert
          secret:
            secretName: metrics-server-cert
